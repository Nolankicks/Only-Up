@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using Sandbox.Diagnostics;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Linq;
@inherits PanelComponent

<root>
    <div class="lobby-list">
		<button @onclick=@CreateLobby class="scenelist">Create Server</button>
        <div class="header">
            <div class="title">Server List</div>
        </div>

        @if (refreshing)
        {
            <div>Refreshing..</div>
        }
        else if (list.Count == 0)
        {
            <div>No lobbies were found</div>
        }
        else
        {
            @foreach (var lobby in list)
            {
                <div class="button" onclick=@(() => OpenLobby( lobby ) )>

                    <div class="title">
                        @lobby.Name
                    </div>

                    <div class="meta">

                        <div class="count">
                            @lobby.Members / @lobby.MaxMembers
                        </div>

                    </div>

                </div>
            }
        }
    </div>
</root>

@code
{

    bool refreshing;
    List<LobbyInformation> list = new();
        [Property] SceneFile GameScene;

    protected override void OnEnabled()
    {
        base.OnEnabled();

        Assert.True(GameObject.IsValid());

        _ = RefreshLobbyList();
    }

    async Task RefreshLobbyList()
    {
        bool isFirst = true;
        while ( true )
        {
            refreshing = true;
            StateHasChanged();

            list = await GameNetworkSystem.QueryLobbies();

            if(isFirst)
            {
                list = list.OrderBy( x => x.Members ).ToList();
                if(list.Count == 0)
                {

                }
                else if(list.Count == 1)
                {
                    GameNetworkSystem.Connect( list[0].LobbyId );
                }
            }

            refreshing = false;
            StateHasChanged();

            await Task.DelayRealtimeSeconds( 2.0f );

            isFirst = false;
        }
    }

    void OpenLobby( LobbyInformation lobby )
    {
        GameNetworkSystem.Connect( lobby.LobbyId );
    }

	void CreateLobby()
	{
GameManager.ActiveScene.Load(GameScene);
}
}
